name: 'Test-init'
on:
  workflow_dispatch:
  
jobs:    
  # Get variable files (currently on for all environments)  
  variables: 
    uses: ./.github/workflows/variables.yml
  
########################################################################################################################################
# Development


 # Build plan
  build-plan:
    runs-on: ubuntu-latest
    needs: variables
    permissions:
      pull-requests: write
    environment: prod
    env:
       ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
       ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
       ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
       ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
    defaults:
      run:
        shell: bash
        working-directory: tf_core
    steps:
      - name: Checkout
        uses: actions/checkout@v3.3.0
      
      - name: Log in with Azure
        uses: azure/login@v1
        with:
          creds: "${{ secrets.AZURE_CREDENTIALS }}"
          enable-AzPSSession: true
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: latest

      - name: Terraform Format
        id: fmt
        run: terraform fmt --check

      - name: Terraform Init
        id: init
        run: | 
          terraform init \
          --backend-config="storage_account_name=${{ needs.variables.outputs.az_mgmt_storage_acc }}prod001" \
          --backend-config="container_name=${{ needs.variables.outputs.az_mgmt_container_name }}" \
          --backend-config="resource_group_name=${{ needs.variables.outputs.az_mgmt_resource_group }}" \
          --backend-config="key=${{ needs.variables.outputs.tf_key }}"
      
      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan --var-file=config_dev.tfvars.json --out=plan.tfplan -input=false
        continue-on-error: true


      # Returns whether a plan was successfully generated or not. This step highlights whenever a plan fails because the Terraform Plan step continues on error.
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        run: terraform apply -auto-approve plan.tfplan
