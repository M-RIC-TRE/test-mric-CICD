name: 'Deploy-terraform-merge'
on:
# Approved Pull request will create plan and deploy to a production workspace
#   pull_request_review:
#     branches: 
#        - main  
#     types: [submitted]

#   pull_request:
#     types:
#       - closed

#   push:
#     branches:
#       - main
  workflow_dispatch:
  
jobs:
  # Get variable files (currently on for all environments)  
  
  variables: 
    uses: ./.github/workflows/variables.yml
  
######################################################################################################
###########                               Dev                               ##########################
######################################################################################################

  build_terraform_development:
  #  if: github.event.review.state == 'approved'  ############################## Deploy on appoved
    runs-on: ubuntu-latest
    needs: variables
    # if: github.event.pull_request.merged == true  ############################## Deploy on appoved
    permissions:
      pull-requests: write
    environment: dev
    env:
       ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
       ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
       ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
       ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
    defaults:
      run:
        shell: bash
        #working-directory: tf_core
    steps:
#       - name: Download Artifact
#         uses: actions/download-artifact@v3.0.2
#         with:
#           name: tfplan
#           path: tf_core
#       - name: Decompress TF Plan artifact
#         run: unzip tfplan.zip
    
      - name: Log in with Azure
        uses: azure/login@v1
        with:
          creds: "${{ secrets.AZURE_CREDENTIALS }}"
          enable-AzPSSession: true
      
      - name: Download plan from storage account
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            # az storage account donwload
            az storage blob download --account-name "${{ needs.variables.outputs.az_mgmt_storage_acc }}dev" --container-name ${{ needs.variables.outputs.az_mgmt_container_name }} --name tfplan.zip --file tfplan.zip
    
      - name: Decompress TF Plan artifact
        run: unzip tfplan.zip
    
    
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: latest

      - name: Terraform Init
        run: | 
          terraform init \
          --backend-config="storage_account_name=${{ needs.variables.outputs.az_mgmt_storage_acc }}dev" \
          --backend-config="container_name=${{ needs.variables.outputs.az_mgmt_container_name }}" \
          --backend-config="resource_group_name=${{ needs.variables.outputs.az_mgmt_resource_group }}" \
          --backend-config="key=${{ needs.variables.outputs.tf_key }}" 
      
      - name: Terraform Apply using plan
        run: terraform apply plan.tfplan
      
# ######################################################################################################
# ###########                               prod                              ##########################
# ######################################################################################################    
        
        
#   # Create management resource group
#   build_management_prod:
#     if: github.event.review.state == 'approved'
#     needs: [variables, terraform-apply-dev]
#     runs-on: ubuntu-latest
#     environment: prod
#     steps:
#       - name: Log in with Azure
#         uses: azure/login@v1
#         with:
#           creds: "${{ secrets.AZURE_CREDENTIALS }}"
#           enable-AzPSSession: true

#       - name: Create Resource Group
#         id: create_resource_group
#         uses: azure/CLI@v1
#         with:
#           inlineScript: |
#             az group create --name ${{ needs.variables.outputs.az_mgmt_resource_group }} --location ${{ needs.variables.outputs.location }}
  
#       - name: Create Storage Account
#         id: create_storage_account
#         uses: azure/CLI@v1
#         with:
#             inlineScript: |
#               az storage account create --name  "${{ needs.variables.outputs.az_mgmt_storage_acc }}prodtest" --resource-group  ${{ needs.variables.outputs.az_mgmt_resource_group }} --location  ${{ needs.variables.outputs.location }} --sku Standard_LRS --encryption-services blob
            
#       - name: Create Storage Container
#         id: create_storage_container
#         uses: azure/CLI@v1
#         with:
#           inlineScript: |
#             az storage container create --name ${{ needs.variables.outputs.az_mgmt_container_name }} --account-name "${{ needs.variables.outputs.az_mgmt_storage_acc }}prodtest"
        
        
#   # Build plan
#   deploy-prod:
#     if: github.event.review.state == 'approved'
#     runs-on: ubuntu-latest
#     needs: build_management_prod
#     permissions:
#       pull-requests: write
#     environment: prod
#     env:
#        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
#        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
#        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
#        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
#     defaults:
#       run:
#         shell: bash
#         working-directory: tf_core
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3.3.0

#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v2.0.3
#         with:
#           terraform_version: latest

#       - name: Terraform Format
#         id: fmt
#         run: terraform fmt --check

#       - name: Terraform Init
#         id: init
#         run: | 
#           terraform init \
#           --backend-config="storage_account_name=${{ needs.variables.outputs.az_mgmt_storage_acc }}prodtest" \
#           --backend-config="container_name=${{ needs.variables.outputs.az_mgmt_container_name }}" \
#           --backend-config="resource_group_name=${{ needs.variables.outputs.az_mgmt_resource_group }}" \
#           --backend-config="key=${{ needs.variables.outputs.tf_key }}"
      
#       - name: Terraform Validate
#         id: validate
#         run: terraform validate

#       - name: Terraform Plan
#         # if: github.event_name == 'pull_request'
#         id: plan
#         run: terraform plan --var-file=config_prod.tfvars.json --out=plan.tfplan -input=false
#         continue-on-error: true
      
#       # adds a comment to the pull request with the results of the format, init and plan steps  
#       - name: Update Review Request
#         uses: actions/github-script@v6
#         # if: github.event_name == 'pull_request'
#         env:
#           PLAN: "${{ steps.plan.outputs.stdout }}"
#         with:
#           github-token: ${{ secrets.GITHUB_TOKEN }}
#           script: |
#             const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
#             #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
#             #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
#             #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
#             <details><summary>Show Plan</summary>
#             \`\`\`terraform\n
#             ${process.env.PLAN}
#             \`\`\`
#             </details>
#             *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
#             github.rest.issues.createComment({
#               issue_number: context.issue.number,
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               body: output
#             })  
#       # Returns whether a plan was successfully generated or not. This step highlights whenever a plan fails because the Terraform Plan step continues on error.
#       - name: Terraform Plan Status
#         if: steps.plan.outcome == 'failure'
#         run: exit 1 
    
#       - name: Terraform Apply Prod
#         run: terraform apply plan.tfplan # -auto-approve -input=false  
    
    
    
    
    
    
    
    

  
#   # Create management resource group
#   build_management_prod:
#     # Only for approved requests
#     if: github.event.review.state == 'approved'
#     needs: variables
#     runs-on: ubuntu-latest
#     environment: prod
#     steps:
#       - name: Log in with Azure
#         uses: azure/login@v1
#         with:
#           creds: "${{ secrets.AZURE_CREDENTIALS }}"
#           enable-AzPSSession: true

#       - name: Create Resource Group
#         id: create_resource_group
#         uses: azure/CLI@v1
#         with:
#           inlineScript: |
#             az group create --name ${{ needs.variables.outputs.az_mgmt_resource_group }} --location ${{ needs.variables.outputs.location }}
  
#       - name: Create Storage Account
#         id: create_storage_account
#         uses: azure/CLI@v1
#         with:
#             inlineScript: |
#               az storage account create --name  "${{ needs.variables.outputs.az_mgmt_storage_acc }}prod" --resource-group  ${{ needs.variables.outputs.az_mgmt_resource_group }} --location  ${{ needs.variables.outputs.location }} --sku Standard_LRS --encryption-services blob
            
#       - name: Create Storage Container
#         id: create_storage_container
#         uses: azure/CLI@v1
#         with:
#           inlineScript: |
#             az storage container create --name ${{ needs.variables.outputs.az_mgmt_container_name }} --account-name "${{ needs.variables.outputs.az_mgmt_storage_acc }}prod"
  
# ########################################################################################################################################
# # Production

#  # Build plan
#   build-plan-prod:
#     # Only for approved requests
#     if: github.event.review.state == 'approved'       
#     runs-on: ubuntu-latest
#     needs: build_management_prod
#     environment: prod
#     env:
#        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
#        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
#        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
#        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
#     defaults:
#       run:
#         shell: bash
#         working-directory: tf_core
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3.3.0

#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v2.0.3
#         with:
#           terraform_version: latest

#       - name: Terraform Format
#         id: fmt
#         run: terraform fmt --check

#       - name: Terraform Init
#         id: init
#         run: | 
#           terraform init \
#           --backend-config="storage_account_name=${{ needs.variables.outputs.az_mgmt_storage_acc }}prod" \
#           --backend-config="container_name=${{ needs.variables.outputs.az_mgmt_container_name }}" \
#           --backend-config="resource_group_name=${{ needs.variables.outputs.az_mgmt_resource_group }}" \
#           --backend-config="key=${{ needs.variables.outputs.tf_key }}"
      
#       - name: Terraform Validate
#         id: validate
#         run: terraform validate

#       - name: Terraform Plan
#         id: plan
#         run: terraform plan --var-file=config_prod.tfvars.json --out=plan.tfplan -input=false
#         continue-on-error: true

# #      Deploy to prod:
#       - name: Terraform Apply
#         run: terraform apply plan.tfplan
