name: 'Deploy-pull-request-merge'
on:
  pull_request:
    branches: 
       - main  
    types:
      - closed   
  workflow_dispatch:
  
jobs:
  # Get variable files (currently on for all environments)  
  variables: 
    uses: ./.github/workflows/variables.yml
  
######################################################################################################
###########                               Dev                               ##########################
######################################################################################################

  build_terraform_development:
    # if: github.event.pull_request.merged == true ###############################TEMP#######################################################################
    runs-on: ubuntu-latest
    needs: variables
    permissions:
      pull-requests: write
    environment: dev
    env:
       ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
       ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
       ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
       ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
    defaults:
      run:
        shell: bash
    steps:    
      - name: Log in with Azure
        uses: azure/login@v1
        with:
          creds: "${{ secrets.AZURE_CREDENTIALS }}"
          enable-AzPSSession: true
      
      - name: Download plan from storage account
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            # az storage account donwload
            az storage blob download --account-name "${{ needs.variables.outputs.az_mgmt_storage_acc }}dev" --container-name ${{ needs.variables.outputs.az_mgmt_container_name }} --name tfplan.zip --file tfplan.zip
    
      - name: Decompress TF Plan artifact
        run: unzip tfplan.zip
    
    
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: latest

      - name: Terraform Init
        run: | 
          terraform init \
          --backend-config="storage_account_name=${{ needs.variables.outputs.az_mgmt_storage_acc }}dev" \
          --backend-config="container_name=${{ needs.variables.outputs.az_mgmt_container_name }}" \
          --backend-config="resource_group_name=${{ needs.variables.outputs.az_mgmt_resource_group }}" \
          --backend-config="key=${{ needs.variables.outputs.tf_key }}" 
      
      - name: Terraform Apply using plan
        run: terraform apply plan.tfplan
  
######################################################################################################
###########                               Prod                              ##########################
######################################################################################################

  plan-and-build_terraform_production:
    # if: github.event.pull_request.merged == true ###############################TEMP#######################################################################
    runs-on: ubuntu-latest
    needs: [variables,build_terraform_development]
    permissions:
      pull-requests: write
    environment: prod
    env:
       ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
       ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
       ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
       ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
    defaults:
      run:
        shell: bash
        working-directory: tf_core
    steps:    
      - name: Log in with Azure
        uses: azure/login@v1
        with:
          creds: "${{ secrets.AZURE_CREDENTIALS }}"
          enable-AzPSSession: true

# Create management resource group
      - name: Create Resource Group
        id: create_resource_group
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az group create --name ${{ needs.variables.outputs.az_mgmt_resource_group }} --location ${{ needs.variables.outputs.location }}
  
      - name: Create Storage Account
        id: create_storage_account
        uses: azure/CLI@v1
        with:
            inlineScript: |
              az storage account create --name  "${{ needs.variables.outputs.az_mgmt_storage_acc }}prod001" --resource-group  ${{ needs.variables.outputs.az_mgmt_resource_group }} --location  ${{ needs.variables.outputs.location }} --sku Standard_LRS --encryption-services blob
            
      - name: Create Storage Container
        id: create_storage_container
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az storage container create --name ${{ needs.variables.outputs.az_mgmt_container_name }} --account-name "${{ needs.variables.outputs.az_mgmt_storage_acc }}prod001"
  
      - name: Checkout
        uses: actions/checkout@v3.3.0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: latest

      - name: Terraform Format
        id: fmt
        run: terraform fmt --check

      - name: Terraform Init
        id: init
        run: | 
          terraform init \
          --backend-config="storage_account_name=${{ needs.variables.outputs.az_mgmt_storage_acc }}prod001" \
          --backend-config="container_name=${{ needs.variables.outputs.az_mgmt_container_name }}" \
          --backend-config="resource_group_name=${{ needs.variables.outputs.az_mgmt_resource_group }}" \
          --backend-config="key=${{ needs.variables.outputs.tf_key }}"
      
      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan --var-file=config_prod.tfvars.json --out=plan.tfplan -input=false
        continue-on-error: true


# ###### Non need to download and upload as it's the same job ############################################################

# # Zip and save prod file in management azure storage account
#       - name: Compress TF Plan artifact
#         run: zip -r tfplan.zip ./*
      
#       - name: Upload to storage using CLI
#         uses: azure/CLI@v1
#         with:
#           azcliversion: latest
#           inlineScript: |
#             # az storage account upload
#             ls
#             cd tf_core
#             ls
#             az storage blob upload --account-name "${{ needs.variables.outputs.az_mgmt_storage_acc }}prod001" --container-name ${{ needs.variables.outputs.az_mgmt_container_name }} --file tfplan.zip
#             cd..
#             ls
  
#       - name: Download plan from storage account
#         uses: azure/CLI@v1
#         with:
#           azcliversion: latest
#           inlineScript: |
#             # az storage account donwload
#             az storage blob download --account-name "${{ needs.variables.outputs.az_mgmt_storage_acc }}prod001" --container-name ${{ needs.variables.outputs.az_mgmt_container_name }} --name tfplan.zip --file tfplan.zip
    
#       - name: Decompress TF Plan artifact
#         run: unzip tfplan.zip
    ################################################################################################################
#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v2.0.3
#         with:
#           terraform_version: latest

#       - name: Terraform Init
#         run: | 
#           terraform init \
#           --backend-config="storage_account_name=${{ needs.variables.outputs.az_mgmt_storage_acc }}prod001" \
#           --backend-config="container_name=${{ needs.variables.outputs.az_mgmt_container_name }}" \
#           --backend-config="resource_group_name=${{ needs.variables.outputs.az_mgmt_resource_group }}" \
#           --backend-config="key=${{ needs.variables.outputs.tf_key }}" 
      
      - name: Terraform Apply using plan
        run: terraform apply plan.tfplan
