### Reusable workflow to plan terraform deployment, create artifact and upload to workflow artifacts for consumption ###
name: "deploy_plan"
on:
  workflow_call:
    inputs:
      path:
        description: 'Specifies the path of the root terraform module.'
        required: true
        type: string
      tf_version:
        description: 'Specifies version of Terraform to use. e.g: 1.1.0 Default=latest.'
        required: false
        type: string
        default: latest
      environment:
        description: 'Specifies deployment environment.'
        required: false
        type: string
        default: dev
#     secrets:
#       ARM_CLIENT_ID:
#         required: true
#       ARM_CLIENT_SECRET:
#         required: true
#       ARM_SUBSCRIPTION_ID:
#         required: true
#       ARM_TENANT_ID:
#         required: true

jobs:
  variables:
    uses: ./.github/workflows/variables.yml
  build-plan:
    runs-on: ubuntu-latest
    needs: variables
    environment:  ${{ inputs.environment }}
#     env:
#       ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
#       ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
#       ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
#       ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.path }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3.3.0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: ${{ inputs.tf_version }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt --check

      - name: Terraform Init
        id: init
        run: | 
          terraform init \
          --backend-config="storage_account_name=${{ needs.variables.outputs.az_mgmt_storage_acc }}" \
          --backend-config="container_name=${{ needs.variables.outputs.az_mgmt_container_name }}" \
          --backend-config="resource_group_name=${{ needs.variables.outputs.az_mgmt_resource_group }}" \
          --backend-config="key=${{ needs.variables.outputs.tf_key }}"
      
      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan --var-file="${{ needs.variables.outputs.tf_vars_file }}dev.tfvars.json" --out=plan.tfplan -input=false
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

# test
      - name: Compress TF Plan artifact
        run: zip -r ${{ needs.variables.outputs.tf_key }}.zip ./*

      - name: Upload Artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: "${{ needs.variables.outputs.tf_key }}"
          path: "${{ inputs.path }}/${{ needs.variables.outputs.tf_key }}.zip"
          retention-days: 5
