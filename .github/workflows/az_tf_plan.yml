### Reusable workflow to plan terraform deployment, create artifact and upload to workflow artifacts for consumption ###
name: "Build_TF_Plan"
on:
  workflow_call:
    inputs:
      path:
        description: 'Specifies the path of the root terraform module.'
        required: true
        type: string
      tf_version:
        description: 'Specifies version of Terraform to use. e.g: 1.1.0 Default=latest.'
        required: false
        type: string
        default: latest
#       az_resource_group:
#         description: 'Specifies the Azure Resource Group where the backend storage account is hosted.'
#         required: true
#         type: string
#       az_storage_acc:
#         description: 'Specifies the Azure Storage Account where the backend state is hosted.'
#         required: true
#         type: string
#       az_container_name:
#         description: 'Specifies the Azure Storage account container where backend Terraform state is hosted.'
#         required: true
#         type: string
#       tf_key:
#         description: 'Specifies the Terraform state file name for this plan. Workflow artifact will use same name'
#         required: true
#         type: string
#       tf_vars_file:
#         description: 'Specifies the Terraform TFVARS file.'
#         required: true
#         type: string

#     secrets:
#       arm_client_id:
#         description: 'Specifies the Azure ARM CLIENT ID.'
#         required: true
#       arm_client_secret:
#         description: 'Specifies the Azure ARM CLIENT SECRET.'
#         required: true
#       arm_subscription_id:
#         description: 'Specifies the Azure ARM SUBSCRIPTION ID.'
#         required: true
#       arm_tenant_id:
#         description: 'Specifies the Azure ARM TENANT ID.'
#         required: true

jobs:
  variables:
    uses: M-RIC-TRE/infrastructure-landing-mric/.github/workflows/variables.yml@sp
  build-plan:
    runs-on: ubuntu-latest
    needs: variables
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.path }}
#     env:
#       STORAGE_ACCOUNT: ${{ inputs.az_storage_acc }}
#       CONTAINER_NAME: ${{ inputs.az_container_name }}
#       TF_KEY: ${{ inputs.tf_key }}
#       TF_VARS: ${{ inputs.tf_vars_file }}
    env:
        ARM_CLIENT_ID: ${{ secrets.arm_client_id }}
        ARM_CLIENT_SECRET: ${{ secrets.arm_client_secret }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.arm_subscription_id }}
        ARM_TENANT_ID: ${{ secrets.arm_tenant_id }}
  
    steps:
      - name: Checkout
        uses: actions/checkout@v3.3.0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: ${{ inputs.tf_version }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt --check

      - name: Terraform Init
        id: init
        run: | 
          terraform init \
          --backend-config="storage_account_name=$${{ needs.variables.outputs.az_mgmt_storage_acc }}" \
          --backend-config="container_name=${{ needs.variables.outputs.az_mgmt_container_name }}" \
          --backend-config="resource_group_name=${{ needs.variables.outputs.az_mgmt_resource_group }}" \
          --backend-config="key=$${{ needs.variables.outputs.tf_key }}"
      
      - name: Terraform Validate
        id: validate
        run: terraform validate
      
#       - name: Log in with Azure
#         uses: azure/login@v1
#         with:
#           creds: "${{ secrets.AZURE_CREDENTIALS }}"
#           enable-AzPSSession: true

      - name: Terraform Plan
        id: plan
        run: terraform plan --var-file=${{ needs.variables.outputs.tf_vars_file }}dev.tfvars --out=plan.tfplan
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
